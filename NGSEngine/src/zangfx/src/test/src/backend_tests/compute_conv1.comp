#version 310 es
precision mediump float;

const uint local_size = 64u;
const uint kernel_size = 4u;

layout(local_size_x = 64 /* local_size */) in;

shared uint in_values[local_size + kernel_size - 1u];

layout(std140, set = 1, binding = 1) readonly uniform ConvolutionParameter {
    // SPIRV-Cross disregards std140's array base alignment rule, so we can't
    // use `uint[]` here. Only the `x` component of each element is actually
    // used by the kernel.
    uvec4 kernel_values[kernel_size];
} conv_param;

layout(std430, set = 1, binding = 2) readonly buffer ConvolutionInput {
    uint data[];
} conv_in;

layout(std430, set = 1, binding = 3) writeonly buffer ConvolutionOutput {
    uint data[];
} conv_out;

void main()
{
    uint local_id = gl_LocalInvocationID.x;

    // load input data into shared memory
    uint global_id = gl_GlobalInvocationID.x;

    in_values[local_id] = conv_in.data[global_id];
    if (local_id > local_size - kernel_size) {
        in_values[local_id + kernel_size - 1u] =
            conv_in.data[global_id + kernel_size - 1u];
    }

    // wait for all inputs to be ready...
    groupMemoryBarrier();
    barrier();

    // perform convolution
    uint sum = 0u;
    for (uint i = 0u; i < kernel_size; ++i) {
        sum += in_values[local_id + i] * conv_param.kernel_values[i].x;
    }

    // store the result
    conv_out.data[global_id] = sum;
}
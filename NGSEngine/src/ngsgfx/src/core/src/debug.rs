//
// Copyright 2017 yvt, all rights reserved.
//
// This source code is a part of Nightingales.
//
use cgmath::Vector3;
use enumflags::BitFlags;

pub trait Marker {
    /// Specifiy a name to identify this object, or entity if this is a handle
    /// type.
    #[allow(unused_variables)]
    fn set_label(&self, label: Option<&str>) {}
}

/// Represents a debug marker or group that can be encoded into a command buffer.
#[derive(Debug, Copy, Clone)]
pub struct DebugMarker<'a> {
    name: &'a str,
    color: Option<Vector3<f32>>,
}

impl<'a> DebugMarker<'a> {
    #[inline]
    pub fn new(name: &'a str) -> Self {
        Self { name, color: None }
    }

    #[inline]
    pub fn with_color(&self, red: f32, green: f32, blue: f32) -> Self {
        Self {
            color: Some(Vector3::new(red, green, blue)),
            ..*self
        }
    }

    #[inline]
    pub fn name(&self) -> &'a str {
        self.name
    }

    #[inline]
    pub fn color(&self) -> &Option<Vector3<f32>> {
        &self.color
    }
}

/// Debug report provided by validation layers.
#[derive(Debug, Clone)]
pub struct DebugReport<'a> {
    pub typ: DebugReportType,
    pub message: &'a str,
}

/// Receives `DebugReport`s generated by drivers and validation layers.
pub trait DebugReportHandler: Send + Sync {
    fn log(&self, report: &DebugReport);
}

// prevent `InnerXXX` from being exported
mod flags {
    #[derive(EnumFlags, Copy, Clone, Debug, Hash, PartialEq, Eq)]
    #[repr(u32)]
    pub enum DebugReportType {
        /// Informational messages that may be handy when debugging an
        /// application.
        Information = 0b00001,

        /// Reports for potentially wrong, but not immediately harmful API usages.
        Warning = 0b00010,

        /// Reports for non-optimal API usages.
        PerformanceWarning = 0b00100,

        /// Reports for usages that may cause undefined results.
        Error = 0b01000,

        /// Diagnostic informations.
        Debug = 0b10000,
    }
}

pub use self::flags::DebugReportType;
pub type DebugReportTypeFlags = BitFlags<DebugReportType>;

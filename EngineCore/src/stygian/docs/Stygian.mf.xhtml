<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><pre><![CDATA[

                        **Stygian Suppelemental Notes**

# Basics

## Coordinate space

:::
:::   o---> +X
:::   |
:::   v +Y
:::

## Quadrants

:::
:::    NW  |  NE        ',  Up  ,'
:::        |              ',  ,'
:::  ------o------     Left    Right
:::        |              ,'  ',
:::    SW  |  SE        ,' Down ',
:::

# Terrain rasterization

The terrain rasterizes creates a low-resolution depth image from terrain data and a scene setup. The generated image is guaranteed to have lower (farther from the camera) depth values compared to the ground truth image at every point, making itself useful for CPU-based occlusion culling.

The process goes as follows: (i) a panorama image around the camera is generated; (ii) the panorama image is projected to the final image using the camera's projection matrix.

## Sample allocation

Not every portion of the panorama image contributes to the final output as it may be outside the camera's viewport. Furthermore, the algorithm wouldn't be effective if the resolution of the panorama image is not well adjusted; for example, a too high resolution only harms the runtime performance without a much effect on the output quality. Naturally, the best result is achieved if the resolutions of the terrain data, the panorama image, and the final depth image are all consistent — one element (voxel/pixel) in one step roughly corresponds to another one in the subsequent step.

Each column in the panorama image is called *a beam* ([^Figure rast-beams]). Each beam corresponds to a particular range of azimuth angles, and serves as a basic unit on which a single run of the opticast algorithm is performed. A beam contains one or more *samples* for each of which the minimum (farthest from the camera) depth value is recorded. Each beam can have a varying number of samples.

![^Figure rast-beams][](Images/Opticast-Beams.svg):
    Beams and samples

The optimal sample allocation is determined using the two-level algorithm: (i) firstly, the distribution of beams is determined; (ii) secondly, samples are allocated to beams according to how much portion of beams is inside the viewport. The algorithm takes an image size $N$ as input, which applies scaling to sample counts in several portions of the algorithm. This value can be adjusted independently from the actual image size as needed.

The sample allocation algorithm requires the screen-space position of the zenith and nadir. In any case only one of the zenith and nadir is visible, and the visible one is called *a vanishing point*. A care must be taken when the optical axis of the camera is completely horizontal because in such cases a vanishing point is infinitely far away from the viewport ([!Figure rast-zenith]) and causes numerical problems if its screen-space position is stored explicitly. It's recommended that perspective division on its position is avoided entirely.

![!Figure rast-zenith][](Images/Opticast-Zenith.svg):
    The possible locations of a vanishing point

In screen-space, every longitudinal line is a straight line starting from the vanishing point. If one of such lines goes through the viewport, it must leave the viewport through a point on the viewport's border. Therefore, projecting all viewport edges oriented toward/against the vanishing point on the sphere and examining their spherical coordinates gives us an idea of which range of azimuth angles we must blanket with beams.

Alternatively, the direction of the change in the azimuth angle as you move on the edges could be examined to determine the orientations of the edges in regard to the vanishing point ([^Figure rast-azimuth-delta]). This method doesn't require the screen-space position of the vanishing point.

![^Figure rast-azimuth-delta][](Images/Opticast-AzimuthDelta.svg):
    An alternative way to obtain the range of azimuth angles

How wide each beam should be? One possible answer is to match the density of longitudinal lines to the output image resolution, i.e.:

$$
\left|
    \frac{\partial}{\partial\theta}Project(\vec{p})
\right|
\Delta\theta = \frac{2}{N}
$$

where $\Delta\theta$ is the width of a beam and $\vec{p}$ is a point with azimuth angle $\theta$.

The number of samples in a beam can be determined from the length of its portion inside the viewport.

## Opticast

# 2D beam-casting

The `mipbeamcast` function performs beam-casting with adaptive mipmapping on a given map.

The algorithm takes an *beam* as input. A beam is defined by one vertex `start` and direction vectors `dir1` and `dir2` of the two edges extending from the vertex ([^Figure beam]). The angle of the beam must be less than 45°. In reality, it's much smaller than that.

[^Figure beam]: A beam

    :::::::::::::::::::
    :: start    dir1 ::
    ::   o-------->  ::
    ::    \          ::
    ::     v         ::
    ::       dir2    ::
    :::::::::::::::::::

Another input is a *map* which is a 2D grid of size $N_1 \times N_2$ that spans across the region $\{(x, y) | 0 \leq x < N_1 \wedge 0 \leq y < N_2\}$. The map includes a set of *cells*, which are 1×1-sized squares that cover the region. In addition, the map also includes increasingly larger sets of cells. Each set is called a *mipmap level*. The exact structure of the mipmap levels is not fundamental to the algorithm, but to ease the implementation, it's assumed that the cells in each level are twice as large as the cells in the previous level ([!Figure cells]). For example, the second level (level 1) consists of 2×2-sized squares. The largest cell entirely covers the region.

[!Figure cells]: Mipmap levels

    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    :: +---+---+---+---+     +-------+-------+      +---------------+ ::
    :: |   |   |   |   |     |       |       |      |               | ::
    :: +---+---+---+---+     |       |       |      |               | ::
    :: |   |   |   |   |     |       |       |      |               | ::
    :: +---+---+---+---+     +-------+-------+      +---------------+ ::
    ::    Base level              Level 1                Level 2      ::
    ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

The goal of the algorithm is to find a set of cells such that every individual cell in the set entirely blocks the path of the beam. The secondary goal is to generate such a set without a gap between the cells.

## Axis normalization

To simplify the implementation, the algorithm transforms the input vectors so that `dir1` always falls into the SE-Right octant. The inverse transformation is applied to the algorithm's output to cancel the effect of axis normalization. After the transformation, `dir2` can be in one of the three octants ([^Figure dirrange]). Each case may require separate handling.

[^Figure dirrange]: The possible ranges of `dir1` and `dir2` after axis normalization

    :::::::::::::::::::::::::
    ::     ,'         ,'   ::
    ::   ,'         ,' ✓   ::
    ::  o-----     o-----  ::
    ::  |', ✓      |', ✓   ::
    ::  |  ',      |✓ ',   ::
    :::::::::::::::::::::::::

## Beam-casting

Each step of the main part of the algorithm proceeds as follows: (i) the portal through which the beam exits the current cell is determined; (ii) the smallest cell that intersects with or contains the portal, thus entirely occludes the path of the beam is found; (iii) move to the cell and repeat these steps until the beam exits the map. The loop invariant is that the entirety of the beam goes through the current cell.

Before entering the loop, the algorithm has to determine the first cell that occludes the beam. This is easy if `start` is inside the map — the base-level cell where `start` resides is what we are looking for. This is more complicated in the other cases. It's also possible that there is no such cell, e.g., when a part or the entirety of the beam misses the map. The output of the algorithm is empty in such cases.

|     |   $x_{start}$    |   $y_{start}$    |                                                            |
|-----|------------------|------------------|------------------------------------------------------------|
| (1) | $\geq N_1$       | any              | Empty output — never coincides with the map                |
| (2) | any              | $\geq N_2$       | Empty output — never or only partly coincides with the map |
| (3) | $0 \leq x < N_1$ | $< 0$            | Depends on `dir1` and `dir2`                               |
| (4) |                  | $0 \leq y < N_2$ | Starts inside the map                                      |
| (5) | $< 0$            | $< 0$            | Depends on `dir1` and `dir2`                               |
| (6) |                  | $0 \leq y < N_2$ | Depends on `dir1` and `dir2`                               |

]]></pre> <!-- Foremark footer -->
<script src="https://unpkg.com/foremark/browser/foremark.js" async="async" /></html>